(*open Core

  module CInt : sig
    type t
  end

  module CBool : sig
    type t

    val not : t -> t
  end

  module ChpId : sig
    include Identifiable

    val new_id : unit -> t
  end

  module Var : sig
    module Id : Identifiable

    type 'dk t

    val id : 'dk t -> Id.t
    val create : unit -> 'dk t
  end

  module Any : sig
    type t
  end

  (* Works because there are no conflicts between the Id space for `'a Var.t` and
     `'b Var.t` *)
  module VarValueMap : sig
    type t

    val find : t -> 'a Var.t -> 'a option
  end

  module Chan : sig
    module Id : Identifiable

    type ('rw, 'dk) t
    type 'dk readable = ([ `readable ], 'dk) t
    type 'dk writable = ([ `writable ], 'dk) t

    module P : sig
      type 'dk t = { r : 'dk readable; w : 'dk writable } [@@deriving fields]
    end

    val id : ('rw, 'dk) t -> ChpId.t
    val new_r : unit -> 'dk readable
    val new_w : unit -> 'dk writable
    val new_rw : unit -> 'dk P.t
    val as_r : ([> `readable ], 'dk) t -> 'dk readable
    val as_w : ([> `writable ], 'dk) t -> 'dk writable
  end

  module ChanConn : sig
    type t

    val port : ('rw, 'data) Chan.t -> ('rw, 'data) Chan.t -> t
    val chain : 'data Chan.readable -> 'data Chan.writable -> t
  end

  module ChpChan : sig
    module Id : Identifiable

    type ('rw, 'dk) t
    type 'dk readable = ([ `readable ], 'dk) t
    type 'dk writable = ([ `writable ], 'dk) t

    val id : ('rw, 'dk) t -> Id.t
    val new_r : ([> `readable ], 'dk) Chan.t -> unit -> 'dk readable
    val new_w : ([> `writable ], 'dk) Chan.t -> unit -> 'dk writable
  end

  module Expr : sig
    type 'dk t

    val of_var : 'dk Var.t -> 'dk t
    val of_cint : CInt.t -> CInt.t t
    val of_cbool : CBool.t -> CBool.t t
    val map : 'i t -> f:('i -> 'o) -> 'o t
    val mapv : 'i Var.t -> f:('i -> 'o) -> 'o t
    val map2 : 'i1 t -> 'i2 t -> f:('i1 -> 'i2 -> 'o) -> 'o t
  end

  module Stmt : sig
    type t

    module GuardedBranch : sig
      type outer = t
      type t

      val create : guard:CBool.t Expr.t -> outer list -> t
      val guard : t -> CBool.t Expr.t
      val stmts : t -> outer list
    end

    val seq : t list -> t
    val par : t list -> t
    val assign : 'data Var.t -> 'data Expr.t -> t
    val read : 'data ChpChan.readable -> 'data Var.t -> t
    val send : 'data ChpChan.writable -> 'data Expr.t -> t
    val loop : t list -> t
    val do_while : t list -> guard:CBool.t Expr.t -> t
    val select : GuardedBranch.t list -> t
    val assert_ : CBool.t Expr.t -> t
    val log : string Expr.t -> t
  end

  val branch : guard:CBool.t Expr.t -> Stmt.t list -> Stmt.GuardedBranch.t

  module Node : sig
    module Inst : sig
      type t
    end

    type 'a t

    val of_chp : Stmt.t -> ports:'a -> 'a t
    val of_nodes : Inst.t list -> ports:'a -> 'a t
    val inst : 'a t -> 'a -> zip:('a -> 'a -> ChanConn.t list) -> Inst.t
    val conn_inst : 'data Chan.readable -> 'data Chan.writable -> Inst.t
  end
*)
