open! Core

module Inst : sig
  (* TODO somehow only expose this to the other modules in this directory *)
  type t

  (* Take in a top level node. Return a new top-level node where every subnode
     is expanded out with unique names *)
  val inflate : t -> t
end

type 'a t [@@deriving sexp]

val of_chp :
  Act_extn.Chp_stmt.t -> ports:'a -> pack:('a -> Act_extn.Act_id.t list) -> 'a t

val of_nodes :
  Inst.t list -> ports:'a -> pack:('a -> Act_extn.Act_id.t list) -> 'a t

val inst : 'a t -> 'a -> Inst.t

(* The big dot operator *)
val conn_inst : 'data Act_extn.Chan.R.t -> 'data Act_extn.Chan.W.t -> Inst.t
